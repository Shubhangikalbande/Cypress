const {
    cypressPath,
    audioPath
} = require('../globals');
const sp = require('synchronized-promise')
const ffmpeg = require('ffmpeg-downloader');
const ffprobe = require('@ffprobe-installer/ffprobe')
const {
    msToTime,
} = require('../utility');
const {
    execSync
} = require('child_process')
const fs = require('fs');

var audioStartTime
var audioTimes //Stores when what audio should play, also whether or not that should pause the video

/**
 * Processes the video to include audio.
 * @param {string} video - The name of the video file.
 */
function addAudio(video) {
    //only add audio if there is audio
    if(audioTimes.length < 1){
        return
    }

    // executable for ffmpeg
    const exe = ffmpeg.path;

    //path and name of output file
    const outFile = video + '.audio.mp4';

    //start of ffmpeg command
    var cmd = exe + ' -y -i ' + video
    
    audioTimes.forEach(element => {
        //add audio file to ffmpeg input at the right timestamp
        cmd += ' -itsoffset ' + msToTime(element.time) +
        ' -i ' + cypressPath + audioPath + element.soundFile
    })
    
    //start of ffmpeg filter
    var filter = ' -filter_complex \"amix=inputs=' + audioTimes.length + '\"'
    //construct final command
    cmd += filter + ' -async 1 ' + outFile

    //print the command to console
    console.log('ffmpeg command: ' + cmd)

    //execute the ffmpeg command
    execSync(cmd, (err, stdout, stderr) => {
        if (err) {
            //print ffmpeg error
            console.error(`exec error: ${err}`);
            return;
        }
    });

    fs.renameSync(outFile, video)
}

/**
 * Adds the sound for postprocessing.
 * Plays the actual sound in `cypress open` mode.
 * @param {string} soundFile - Name of the sound file.
 * @param {boolean} interactive - Whether or not Cypress is in `open` mode.
 * @returns null
 */
const addSound = ({
    soundFile,
    interactive
}) => {
    if(interactive){
        return null
    }
    //ms since the start of the spec file
    let time = Date.now() - audioStartTime
    console.log(time)
    //add to the array
    audioTimes.push({
        soundFile,
        time
    })
    return null
}

const getAudioData = ({
    soundFile
}) => {
    return fs.readFileSync(cypressPath + audioPath + soundFile, {encoding: 'base64'});
}

const audioBeforeSpec = (spec) => {
    audioTimes = []
    setAudioStartTime(Date.now() - 3000)
}

const audioAfterSpec = (spec, results) => {
    addAudio(results.video)
}

const setAudioStartTime = (t) => {
    audioStartTime = t
}

const getAudioLength = ({soundFile}) => {
    /*
    //make the function to get audio length synchronous
    let syncFunc = sp(getAudioDurationInSeconds)
    //get the duration of the audio file
    let duration = syncFunc(cypressPath + audioPath + soundFile)
    return 1000*duration*/

    var cmd = ffprobe.path + " -i " + cypressPath + audioPath + soundFile + " -show_entries format=duration -v quiet -of csv=\"p=0\""
    var res = 0

    res = Math.round(1000*parseFloat(execSync(cmd, (err, stdout, stderr) => {
        if (err) {
            //print ffmpeg error
            console.error(`exec error: ${err}`);
            return;
        }
    }).toString()))
    return res + 300
}

module.exports = {
    addSound: addSound,
    audioAfterSpec: audioAfterSpec,
    audioBeforeSpec: audioBeforeSpec,
    setAudioStartTime: setAudioStartTime,
    getAudioLength: getAudioLength,
    getAudioData, getAudioData
}