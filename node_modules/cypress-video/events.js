const {
    addSound,
    audioBeforeSpec,
    getAudioLength,
    audioAfterSpec,
    getAudioData
} = require('./postProcessing/audioPost.js');
const {
   getVideoTime,
   getEndSpecTime,
   videoBeforeSpec,
   videoAfterSpec
} = require('./postProcessing/videoPost.js');
const fs = require('fs');

const {
    fetchFilePath
} = require('./utility.js')

// These are all of the tasks that we use in other commands to communicate with data here.
const tasks = {
    exampleTask({
        greeting,
        name
    }) {
        console.log('%s, %s', greeting, name)
        return null
    },
    addSound,
    getVideoTime,
    getAudioLength,
    getEndSpecTime,
    fetchFilePath,
    getAudioData
}

// After all spec files have ran, delete the videos that don't contain CVC commands.
// Or when not in video mode, don't delete those videos.
const afterRun = (results) => {
    //console.log("after run events: \n")
    //console.log(results)
    
    results.runs.forEach((result) => {
        //fs.renameSync(result.video, result.video + results.config.env.videoVersion)
        if (result.video.search(".spec.js")) { // cypress 9
            var newName = result.video.slice(0, result.video.search(".spec.js")) +
            results.config.env.videoVersion +
            result.video.slice(result.video.search(".spec.js"))
        } else { // cypress 10
            var newName = result.video.slice(0, result.video.search(".cy.js")) +
            results.config.env.videoVersion +
            result.video.slice(result.video.search(".cy.js"))
        }
        fs.renameSync(result.video, newName)
        result.video = newName
        
        if (result && result.video) {
            flag = false
            result.tests.forEach(test => {
                if (commandCheck(test.body)) {
                    flag = flag || true
                }
            })
            result.hooks.forEach(hook => {
                if (commandCheck(hook.body)) {
                    flag = flag || true
                }
            })

            // console.log(result.tests)

            if (!flag && results.config.env.CY_VIDEO_MODE) {
                fs.unlink(result.video, ()=>{})
            }
        }
    })

}

const afterScreenshot = (details) => {

}

/**
 * check if a spec contains any CVC commands
 * @param {string} body: body of the spec
 * @returns {boolean}
 */
function commandCheck(body){
    // TODO: update
    const cvc_commands = ["addText", "addHighlight", "addStyles", "remove", "addZoom", "hideCypress", "addAudio", "slowType", "addMouseIndicator", "addClickIndicator", "videoWait", "startVideo", "endVideo", "addImage", "removeAllHighlights", "removeAllText", "removeAllImages"]

    return cvc_commands.some(command => body.includes(command))
}

const afterSpec = (spec, results) => {
    videoAfterSpec(spec,results)
    audioAfterSpec(spec,results)
}

const beforeBrowser = (browser = {}, launchOptions) => {
    videoBeforeSpec()
}

const beforeRun = (details) => {};

const beforeSpec = (spec) => {
    audioBeforeSpec(spec)
}

const preProcessor = (file) => {
    // TODO if we need this: https://docs.cypress.io/api/plugins/preprocessors-api#Usage
}

module.exports = (on, config) => {
  //Add m when you need m
    on("after:spec", afterSpec),
    on("after:run", afterRun),
    //on('after:screenshot'     , afterScreenshot),
    on('before:browser:launch', beforeBrowser),
    on('before:run'           , beforeRun),
    on('before:spec'          , beforeSpec),
    //on('file:preprocessor'    , preProcessor)
    on('task'                 , tasks)
}
