const {
    addStyles, COLOR_DICT, getAnimationClass
} = require('./commands/style')

/**
 * Checks if something is a hex color
 */
const isHexColor = {message: "is a hex color, or in the color dictionary", function: (c) => {
    let regex = new RegExp('^#[0-9A-Fa-f]{6}$');
    return regex.test(c,'g') || c in COLOR_DICT
}}


/**
 * Checks if a color input is a valid color gradient, or a single valid color string
 */
const isColorGradient = {message: "is a hex color, or a valid color gradient", self: this, function: (color) => {
    if (typeof color == 'string') {
        return isHexColor.function(color)
    }
    
    if (typeof color == 'object') {
        if (Array.isArray(color)) {
            if (color.length <= 1) {
                return false
            }

            for (let i = 0; i < color.length; i++) {
                if (!isHexColor.function(color[i])) {
                    return false
                }
            }

            return true
        }
    }

    return false
}}

/**
 * Checks if something is a hex color
 */
const isAudio = {message: "is an audio file", function: (c) => {
    return typeof(c) == 'string' && (c.endsWith('mp3') || c.endsWith('wav'))
}}

/**
 * Checks if value is between 0 and 1
 */
const isBetweenOneAndZero = {message: "is between one and zero (inclusive)", function: (v) => {
    return v >= 0 && v <= 1
}}

/**
 * Checks if value is positive
 */
const isPositive = {message: "is positive", function: (v) => {
    return v > 0
}}

/**
 * Checks if value is non negative
 */
const isNonNegative = {message: "is not negative", function: (v) => {
    return v >= 0
}}


/**
 * Checks if entry or exit animation name is valid.
 */
const isAnimationClass = {message: "is an animation class", function: (e) => ['fade-in', 'fade-out', 'expand', 'shrink'].includes(e)} // Sorry for the magic array like this, but this improves readability and actionability for the progammer when an error is thrown.

//throw an error if the checkexpression fails
const checkParameter = (value, expressionTuple, parameter, functionName) => {
    if(!expressionTuple.function(value)){
        throw new Error("Parameter Error: The parameter " + parameter 
        + " with value " + value
        + " supplied to the " + functionName 
        + " function does not satisfy the requirement: \'" + expressionTuple.message + "\'");
    }
}

module.exports = {
    checkParameter: checkParameter,
    isHexColor: isHexColor,
    isAudio: isAudio,
    isAnimationClass: isAnimationClass,
    isBetweenOneAndZero: isBetweenOneAndZero,
    isPositive: isPositive,
    isNonNegative: isNonNegative,
    isColorGradient: isColorGradient
}