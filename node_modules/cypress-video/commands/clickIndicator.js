import { addToBody, getNextZIndex, getOffset, intToPx, isElementUnderFixed } from '../utility.js'
import { getAnimationClass } from './style.js'
import { checkParameter, isPositive, isBetweenOneAndZero, isNonNegative } from '../errors.js'

/**
 * Child command.
 * Adds a click indicator to an element previously gotten by `cy.get()`, `cy.contains()`, etc.
 * @param {Cypress.Chainable} subject - Supplied by Cypress.
 * @param {number} timeClick - The time in milliseconds between the click indicator appearing and the click indicator animating the click. Defaults to 300ms.
 * @param {number} timeAfterClick - The time in milliseconds for the click indicator to stay on the screen after clicking before disappearing. Defaults to 300ms.
 * @param {number} scale - The scale of the click indicator.
 * @param {number} alpha - The opacity of the click indicator.
 * @param {boolean} click - Whether or not to automatically click with the click indicator. Defaults to true.
 */
function addClickIndicator(subject, {
    timeClick = 300,
    timeAfterClick = 300,
    scale = 1,
    alpha = 1,
    click = true
} = {}) {

    if (Cypress.env('CY_VIDEO_MODE') != true) {
        if (click) cy.wrap(subject, {log: false}).click({force: true})
        return
    }

    Cypress.log({displayName: "addClickIndicator"})

    // Parameter error checking
    checkParameter(timeClick, isNonNegative, 'timeClick', 'addClickIndicator')
    checkParameter(timeAfterClick, isNonNegative, 'timeAfterClick', 'addClickIndicator')
    checkParameter(scale, isPositive, 'scale', 'addClickIndicator')
    checkParameter(alpha, isBetweenOneAndZero, 'alpha', 'addClickIndicator')

    // Keeping track of the image, and an appropriate scale.
    scale = scale / 16
    var width = 1024
    var height = 1024

    // Setup animations for the click indicator
    var document = cy.state('document')
    var clickAnimations = document.createElement('style')
    clickAnimations.innerHTML = `
    @keyframes cypress-video-creator-click-indicator-appearing {
        0% {
            transform: scale(0, 0);
        }
        100% {
            transform: scale(` + scale + `);
        }
    }

    @keyframes cypress-video-creator-click-indicator-disappearing {
        0% {
            transform: scale(` + scale + `);
        }
        100% {
            transform: scale(0, 0);
        }
    }

    @keyframes cypress-video-creator-click-indicator-click-down {
        0% {
            transform: scale(` + scale + `);
        }
        100% {
            transform: scale(` + scale/1.5 + `);
        }
    }

    @keyframes cypress-video-creator-click-indicator-click-up {
        0% {
            transform: scale(` + scale/1.5 + `);
        }
        100% {
            transform: scale(` + scale + `);
        }
    }

    .cypress-video-creator-click-indicator-appear {
        animation: cypress-video-creator-click-indicator-appearing linear 0.4s;
        animation-fill-mode: forwards;
    }

    .cypress-video-creator-click-indicator-disappear {
        animation: cypress-video-creator-click-indicator-disappearing linear 0.2s;
        animation-fill-mode: forwards;
    }

    .cypress-video-creator-click-indicator-click-down {
        animation: cypress-video-creator-click-indicator-click-down linear 0.15s;
        animation-fill-mode: forwards;
    }

    .cypress-video-creator-click-indicator-click-up {
        animation: cypress-video-creator-click-indicator-click-up linear 0.15s;
        animation-fill-mode: forwards;
    }
    `;
    document.body.appendChild(clickAnimations)

    var img = document.createElement('img')
    
    // This is preloaded by the startVideo command, so no need to wait for it to load in order to get the appearing animation to fully show.
    img.src = "https://i.imgur.com/uszfpHq.png"

    // Positioning
    img.style.left = intToPx(subject.offset().left + subject[0].offsetWidth/2 - width/2)
    img.style.top = intToPx(subject.offset().top + subject[0].offsetHeight/2 - height/2)
    img.style.opacity = alpha
    img.style.zIndex = getNextZIndex()
    img.style.position = 'absolute'
    
    // Always add clickIndicator to body, to avoid zooming issues
    // Furthermore, you don't necessarily want the clickIndicator to be larger because you're zoomed in (otherwise just use a bigger scale)
    document.body.appendChild(img)

    // Appear animation
    img.classList.add(getAnimationClass('click-indicator-appear'))
    cy.wait(400, {log: false})

    // Click
    cy.wait(timeClick, {log: false}).then(() => {
        const clickSubject = subject[0]

        // If clicking a hyperlink, the page load can be so fast that the first half of the click isn't even seen.
        // But clicking immediately does look better, so we make a distinction :>
        if (clickSubject.tagName === "A") {
            img.classList.add(getAnimationClass('click-indicator-click-down'))
            cy.wait(150, {log: false}).then(() => {
                if (click) cy.wrap(subject, {log: false}).click({force: true})
                img.classList.replace(getAnimationClass('click-indicator-click-down'), getAnimationClass('click-indicator-click-up'))
                cy.wait(150, {log: false})
            })
        } else {
            if (click) cy.wrap(subject, {log: false}).click({force: true})

            img.classList.add(getAnimationClass('click-indicator-click-down'))
            cy.wait(150, {log: false}).then(() => {
                img.classList.replace(getAnimationClass('click-indicator-click-down'), getAnimationClass('click-indicator-click-up'))
                cy.wait(150, {log: false})
            })
        }
    })

    // Wait and disappear
    cy.wait(timeAfterClick, {log: false}).then(() => {
        img.classList.replace(getAnimationClass('click-indicator-click-up'), getAnimationClass('click-indicator-disappear'))
        cy.wait(200, {log: false}).then(() => {
            img.remove()
            document.body.removeChild(clickAnimations)
        })
    })

    return cy.wrap(subject, {log: false})
}

Cypress.Commands.add('addClickIndicator', {prevSubject: 'element'}, addClickIndicator)
