/**
 *  This file is to consolidate all removing functionality of added elements
 * Eg. img.remove() and highlight.remove() can be the same function (also preferred by the client (they actually want clear() but that's already a cypress command so like whatever man))
 */

import {highlightClass, highlightElementClass} from "./highlight.js"
import {textClass} from './text.js'
import {imageClass} from "./image.js"
import {classExists} from "../utility.js"
import {checkParameter, isAnimationClass} from '../errors.js'
import {getAnimationClass, addStyles} from './style.js'


/**
 * Child Command.
 * Removes any subject visual element added by the Cypress Video Creator extension.
 * @param {Cypress.Chainable} subject - Supplied by Cypress. Not needed to use this parameter.
 * @param {string} exit - Exit animation name.
 * @param {number} delay - Delay time before removing the subject. Defaults to 500ms.
 * @param {boolean} log - Whether to log the removal of the subject to the Cypress sidebar.
 */
function remove(subject, { exit = null, delay = 500, log = true } = {}) {
    if (Cypress.env("CY_VIDEO_MODE") != true) {
        return;
    }

    if (log) Cypress.log({displayName: "remove"})

    if (exit) {
        if (exit) checkParameter(exit, isAnimationClass, 'exit animation', 'remove')

        addStyles()
        cy.wait(delay, {log: false})
        cy.wrap(subject, {log: false}).invoke({log: false}, 'addClass', getAnimationClass(exit))
        cy.wait(1000, {log: false})
    }

    if (subject.class == highlightElementClass) {
        cy.wrap(subject, {log: false}).siblings({log: false}).invoke({log: false}, "unwrap");
        cy.wrap(subject, {log: false}).invoke({log: false}, "remove");
    } else {
        cy.wrap(subject, {log: false}).invoke({log: false}, "remove");
    }
}

/**
 * Child command.
 * Removes an element highlight.
 * Not needed to use this command, it is a sub-command used by another command.
 * @param {Cypress.Chainable} subject Supplied by Cypress. Not needed to use this parameter.
 */
function removeElementHighlight(subject) {
    cy.wrap(subject, {log: false}).siblings({log: false}).invoke({log: false}, "unwrap");
    cy.wrap(subject, {log: false}).invoke({log: false}, "remove");
}

/**
 * Parent command.
 * Removes all created highlights.
 */
function removeAllHighlights() {
    Cypress.log({displayName: "removeAllHighlights"})
    if (classExists(highlightClass)) {
        cy.get('.' + highlightClass, {log: false}).remove({log: false})
    }

    if (classExists(highlightElementClass)) {
        cy.get("." + highlightElementClass, {log: false}).removeElementHighlight();
    }
}


/**
 * Parent command.
 * Removes all created text boxes.
 */
function removeAllText() {
    Cypress.log()
    if (classExists(textClass)) {
        cy.get('.' + textClass, {log: false}).remove()
    }
}

/**
 * Parent command.
 * Removes all created images.
 */
 function removeAllImages() {
    Cypress.log()
    if (classExists(imageClass)) {
        cy.get('.' + imageClass, {log: false}).remove()
    }
}

Cypress.Commands.add('remove', {prevSubject : 'element'}, remove)
Cypress.Commands.add('removeElementHighlight', {prevSubject : 'element'}, removeElementHighlight)
Cypress.Commands.add('removeAllHighlights', {prevSubject : false}, removeAllHighlights)
Cypress.Commands.add('removeAllText', {prevSubject : false}, removeAllText)
Cypress.Commands.add('removeAllImages', {prevSubject: false}, removeAllImages)
