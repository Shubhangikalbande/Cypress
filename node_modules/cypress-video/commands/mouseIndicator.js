import {
    addToBody,
    getNextZIndex,
    getOffset,
    intToPx,
    viewportHeight,
    viewportWidth,
} from "../utility.js";
import { checkParameter, isNonNegative, isHexColor } from "../errors.js";

/**
 * Creates the classes for the animation on the fly, depending on the parameters of MouseIndicator
 * @param {Array} start - The start position. Array of 2 elements.
 * @param {number} animationDuration - In seconds
 * @param {number} leftGoal - x coordinate of end point.
 * @param {number} topGoal - y coordinate of end point.
 * @returns 
 */
function mouseIndicatorStyles(start, animationDuration, leftGoal, topGoal) {
    return (
        `
  .cypress-video-creator-mouse-indicator {
      left: ` +
        start[0] +
        `px;
      top: ` +
        start[1] +
        `px;
      transition: all ` +
        animationDuration +
        `s ease;
      transition-property: left, top
  }

  .cypress-video-creator-mouse-indicator-moving {
      left: ` +
        leftGoal +
        `;
      top: ` +
        topGoal +
        `;
  }
  `
    );
}

/**
 * Dual command.
 * When called as a child command, move towards the subject and click it.
 * When called as a parent command, move to position on screen.
 * @param {Cypress.Chainable} subject - Supplied by Cypress.
 * @param {Array} start - The starting position of the cursor.
 * @param {number} animationDuration - The duration of the movement animation in seconds.
 * @param {boolean} click - Whether to click the subject or not, true by default.
 * @param {startDelay} startDelay - The time in milliseconds to wait between the cursor appearing and the cursor moving.
 * @param {string} color - The color of the mouse indicator.
 * @param {Array} end - The end position of the mouse, if this is called as a parent command.
 */

function addMouseIndicator(
    subject,
    {
        start = [viewportWidth() / 2, viewportHeight() / 2],
        animationDuration = 1.5,
        click = true,
        startDelay = 0,
        clickDelay = 0,
        endDelay = 0,
        fillColor = "yellow",
        strokeColor = "black",
        end = null,
    } = {}
) {
    if (Cypress.env("CY_VIDEO_MODE") != true) {
        if (click) cy.wrap(subject, { log: false }).click({ force: true });
        return;
    }

    // Parameter checking
    checkParameter(startDelay, isNonNegative, "startDelay", "addMouseIndicator");
    checkParameter(
        animationDuration,
        isNonNegative,
        "animationDuration",
        "addMouseIndicator"
    );
    checkParameter(strokeColor, isHexColor, "strokeColor", "addMouseIndicator");
    checkParameter(fillColor, isHexColor, "fillColor", "addMouseIndicator");
    checkParameter(
        start,
        {
            message: "is an array containing two elements",
            function: (tl) => Array.isArray(tl) && tl.length == 2,
        },
        "start",
        "addImage"
    );
    if (end)
        checkParameter(
            end,
            {
                message: "is an array containing two elements",
                function: (tl) => Array.isArray(tl) && tl.length == 2,
            },
            "end",
            "addImage"
        );

    Cypress.log();

    // Initial variables
    var document = cy.state("document");
    var win = cy.state("window");
    var img = document.createElement("svg");
    var mouseAnimations = document.createElement("style");
    var leftGoal = 0;
    var topGoal = 0;

    // Movement logic for child and parent command usage
    if (subject) {
        var y = subject.offset().top + subject[0].offsetHeight / 2;
        const scrollY = y - viewportHeight() / 2;
        leftGoal = intToPx(subject.offset().left + subject[0].offsetWidth / 2);

        // element is in viewport
        if (win.scrollY <= y && y <= win.scrollY + viewportHeight()) {
            topGoal = intToPx(y - win.scrollY);
            mouseAnimations.innerHTML = mouseIndicatorStyles(
                start, animationDuration, leftGoal, topGoal
            );
        } else {
            cy.scrollTo(0, scrollY, {
                easing: "swing",
                duration: Math.min(3000, Math.abs(y - win.scrollY)),
                log: true,
            }).then(() => {
                topGoal = win.scrollY > 0 ? intToPx(y - scrollY) : intToPx(y);
                mouseAnimations.innerHTML = mouseIndicatorStyles(
                    start, animationDuration, leftGoal, topGoal
                );
            });
        }
    } else if (end) {
        leftGoal = intToPx(end[0]);
        topGoal = intToPx(end[1]);
        mouseAnimations.innerHTML = mouseIndicatorStyles(
            start, animationDuration, leftGoal, topGoal
        );
    }

    mouseAnimations.id = Math.random().toString(36).slice(2, 7);
    document.body.appendChild(mouseAnimations);

    // set pointer svg
    var filePath = cy.task("fetchFilePath", {}, { log: false }).then((path) => {
        return path;
    });

    filePath.then((path) => {
        img.innerHTML = path;
    });

    // Styling
    img.style.position = "fixed";
    img.style.zIndex = getNextZIndex();
    img.classList.add("cypress-video-creator-mouse-indicator");
    img.id = Math.random().toString(36).slice(2, 7);

    addToBody(document, img);

    // color mouse as desired
    var path = cy
        .get("#cypress-video-creator-pointer", { log: false })
        .then((el) => {
            return el;
        });
    path.then((el) => {
        el[0].style.fill = fillColor;
        el[0].style.stroke = strokeColor;
    });

    // Do the movement;
    cy.wait(startDelay, { log: false }).then(() => {
        img.classList.add("cypress-video-creator-mouse-indicator-moving");
    });

    cy.wait(animationDuration * 1000, { log: false }).then(() => {
        // Click if necessary
        if (click && subject) {
            cy.wait(clickDelay, {log: false}).then(() =>
                cy.wrap(subject, { log: false }).click({ force: true })
            );
        }
    });

    // clean up
    cy.wait(endDelay, {log: false}).then(() => {
        img.remove();
        document.body.removeChild(mouseAnimations);
    });
}

Cypress.Commands.add(
    "addMouseIndicator",
    { prevSubject: "optional" },
    addMouseIndicator
);
